Josh Eres
jeeres

1. To implement the scrolling view, I first made the rectangle view swift file as detailed in the lab instructions and made a circle appear in the middle, centered in the view. Then, I added a UIScrollView to the window, and two of the the rectengle view UIViews to the newly-made scroll view. To make the concentric circles for each view, I used a for loop that calculated the minimum width the biggest circle could be, then I used the move method to move the draw tool left by a percentage of the circle's radius, also adjusting the radius in the addArc method. Implementing touch functionality was easy. To do this, I creaded an event handler as detailed in the lab instructions, then saved the touch location as a CGPoint object outside the scope of the function so that every time the event handler was triggered, the point would be updated. Then I included a statement in the for loop that draws the circles so that as long as the CGPoint that I created is not nil, draw the circles, but instead of using the calculations I used to get the center of the screen, I used the x and y coordinates of the touch. 

2. One cool thing about my task B is that instead of it only working for the first view, it works for both views in my scroll view because it updates its locaiton relative to self instead of the entire screen. Because of this, you can touch in one view and not affect the other view. 
